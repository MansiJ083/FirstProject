

// promises are used to handle tasks without using async await and here promises / tasks are dependent on each other and they need to be executed one after other

console.log('person 1: shows ticket');
console.log('person 2: shows ticket');

const promiseWifeBringingTicks = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve('ticket');
  }, 3000)
});

const getPopcorn = promiseWifeBringingTicks.then((t) => {
  console.log('wife: i have the tickets');
  console.log('husband: we should go in');
  console.log('wife: no i am hungry');
  return new Promise((resolve, reject) => resolve('ticket popcorn'));
});

const getButter = getPopcorn.then((t) => {
  console.log('husband: I got some popcorn');
  console.log('husband: we should go in');
  console.log('wife: I need butter on my popcorn');
  return new Promise((resolve, reject) => resolve('ticket popcorn butter'));
});

const getColdDrinks = getButter.then((t) => {
console.log('husband: i got some butter on popcorn');
console.log("husband: we should go in');
console.log('wife: I need some cold drinks');
return new Promise((resolve, reject) => resolve('tickets popcorn butter cold drinks'));
});

getButter.then((t) => console.log(t));

console.log('person 4: shows ticket');
console.log('person 5: shows ticket');






//  promises are used to handle tasks using async await and here promises / tasks are dependent on each other and they need to be exacuted one after other

console.log('person 1: shows ticket');
console.log('person 2: shows ticket');

const preMovie = async () => {
  const promiseWifeBringingTicks = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve('ticket');
  }, 3000)
});

const getPopcorn = new Promise((resolve, reject) => resolve('popcorn'));

const addButter = new Promise((resolve, reject) => resolve('butter'));

let ticket = await promiseWifeBringingTicks;

console.log('wife: i have the tickets');
console.log('husband: we should go in');
console.log('wife: no i am hungry');

let popcorn = await getPopcorn;

console.log('husband: I got some popcorn');
console.log('husband: we should go in');
console.log('wife: I need butter on my popcorn');

let butter = await addButter;

console.log('husband: I got some butter on popcorn');
console.log('husband: anything else darling?');
console.log('wife: lets go we are getting late');
console.log('husband: thankyou for the reminder');

return ticket;
}

preMovie().then((m) => console.log('person 3: shows ticket'));

console.log('person 4: shows ticket');
console.log('person 5: shows ticket');






//  promises are used to handle tasks using async await and here promises / tasks are not dependent on each other and they need not to be exacuted one after other

console.log('person 1: shows ticket');
console.log('person 2: shows ticket');

const preMovie = async () => {
  const promiseWifeBringingTicks = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve('ticket');
  }, 3000)
});

const getPopcorn = new Promise((resolve, reject) => resolve('popcorn'));

const getCandy = new Promise((resolve, reject) => resolve('candy'));

const getCoke = new Promise((resolve, reject) => resolve('coke'));

let ticket = await promiseWifeBringingTicks;

let [popcorn, candy, coke] = await Promise.all([getPopcorn, getCandy, getCoke])

console.log(popcorn, candy, coke);

return ticket;
}

preMovie().then((m) => console.log('person 3: shows ticket'));

console.log('person 4: shows ticket');
console.log('person 5: shows ticket');






 // promises are used to handle tasks using async and here is a async example without using await

const testUserForm = async () => {
  const loadUserForm = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve('page loaded');
  }, 3000)
});

const enterUserName = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve('user entered');
  }, 3000)
});

const verifyUserDetails = () => {
  
}

await loadUserForm;
await enterUserName;
const testResult = verifyUserDetails();
return testResult;
}
testUserForm().then((m) => console.log('shows ${m}'));






// promises are used to handle tasks using async await and here promises / tasks are not dependent on each other and they need not to be executed one after other

console.log('person 1: shows ticket');
console.log('person 2: shows ticket');

const preMovie = async () => {
  const promiseWifeBringingTicks = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve('ticket');
  }, 3000)
});

let ticket
try{
  let ticket = await promiseWifeBringingTicks;
} catch(e){
  ticket = 'sad face'
}
return ticket;
}

preMovie().then((m) => console.log('person 3: shows ${m}'));//shows sad face

console.log('person 4: shows ticket');
console.log('person 5: shows ticket');
